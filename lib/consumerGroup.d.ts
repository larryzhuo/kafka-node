export = ConsumerGroup;
declare function ConsumerGroup(memberOptions: any, topics: any): void;
declare class ConsumerGroup {
    constructor(memberOptions: any, topics: any);
    options: any;
    client: KafkaClient;
    topics: any;
    recovery: ConsumerGroupRecovery;
    _pendingFetches: number;
    isLeader: boolean;
    coordinatorId: any;
    generationId: any;
    ready: boolean;
    topicPayloads: any[];
    payloadMap: {};
    reconnectIfNeeded(): void;
    paused: boolean;
    reconnectTimer: number;
    setupProtocols(protocols: any): void;
    protocols: any;
    setCoordinatorId(coordinatorId: any): void;
    assignPartitions(protocol: any, groupMembers: any, callback: any): void;
    scheduleTopicPartitionCheck(): void;
    topicPartitionCheckTimer: any;
    _checkTopicPartitionChange(callback: any): void;
    handleJoinGroup(joinGroupResponse: any, callback: any): void;
    memberId: any;
    saveDefaultOffsets(topicPartitionList: any, callback: any): void;
    handleSyncGroup(syncGroupResponse: any, callback: any): void;
    getDefaultOffset(tp: any, defaultOffset: any): any;
    getOffset(): Offset;
    offset: Offset;
    connect(): void;
    connecting: boolean;
    clearPendingFetches(): void;
    scheduleReconnect(timeout: any): void;
    rebalancing: boolean;
    startHeartbeats(): void;
    heartbeatInterval: number;
    stopHeartbeats(): void;
    leaveGroup(callback: any): void;
    sendHeartbeat(): Heartbeat;
    fetchOffset(payloads: any, cb: any): void;
    sendOffsetCommitRequest(commits: any, cb: any): void;
    addTopics(topics: any, cb: any): void;
    removeTopics(topics: any, cb: any): void;
    buildPayloads(payloads: any): any;
    buildPayloadMap(payloads: any): {};
    updateOffsets(topics: any, initing: any): void;
    needToCommit: boolean;
    _onFetchDone(topics: any): void;
    _isFetchPending: boolean;
    _resetFetchState(): void;
    _onFetchProcessing(): void;
    fetch(): void;
    setOffset(topic: any, partition: any, offset: any): void;
    pause(): void;
    resume(): void;
    commit: typeof autoCommit;
    autoCommit: typeof autoCommit;
    close(force: any, cb: any): void;
}
import KafkaClient = require("./kafkaClient");
import ConsumerGroupRecovery = require("./consumerGroupRecovery");
import Offset = require("./offset");
import Heartbeat = require("./consumerGroupHeartbeat");
declare function autoCommit(force: any, cb: any, ...args: any[]): any;
declare class autoCommit {
    constructor(force: any, cb: any, ...args: any[]);
    needToCommit: boolean;
    committing: boolean;
}
